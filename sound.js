// Generated by CoffeeScript 1.10.0
(function() {
  var Stream;

  (function(AudioContext) {
    window.audio = window.set_ios_callbacks(new AudioContext());
    return window.new_player = function(options, init, complete) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open('GET', options.url, true);
      xhr.responseType = 'arraybuffer';
      xhr.onload = (function(_this) {
        return function(event) {
          return window.audio.decodeAudioData(xhr.response, function(buffer) {
            return init(new Stream(buffer, options, complete));
          });
        };
      })(this);
      return xhr.send();
    };
  })(window.AudioContext || window.webkitAudioContext);

  Stream = (function() {
    function Stream(buffer1, options1, complete1) {
      this.buffer = buffer1;
      this.options = options1;
      this.complete = complete1;
      this.time = 0;
      this.paused = false;
    }

    Stream.prototype.play = function() {
      this.playing = true;
      return this._play();
    };

    Stream.prototype.stop = function() {
      if (this.paused) {
        delete this.paused;
      }
      this.time = 0;
      return this._stop();
    };

    Stream.prototype.pause = function() {
      this.paused = true;
      this.time += this._playback_time();
      return this._stop();
    };

    Stream.prototype.volume = function(value) {
      return this._volume(value);
    };

    Stream.prototype._volume = function(value) {
      this.node.gain.value = value;
      return true;
    };

    Stream.prototype._playback_time = function() {
      if (!this.started_at) {
        return this.time;
      }
      return (Date.now() - this.started_at) / 1000;
    };

    Stream.prototype._play = function() {
      this.node = window.audio.createGain();
      this.node.connect(window.audio.destination);
      this.source = window.audio.createBufferSource();
      this.source.buffer = this.buffer;
      this.source.connect(this.node);
      this.source.onended = (function(_this) {
        return function(event) {
          return _this._ended();
        };
      })(this);
      this._volume(this.options.volume || 1);
      this.paused = false;
      this.started_at = Date.now();
      this.source.start(0, this.time, this.buffer.duration);
      return true;
    };

    Stream.prototype._stop = function() {
      var e, error;
      if (this.playing) {
        try {
          this.source.stop(0);
          return true;
        } catch (error) {
          e = error;
          return this._ended();
        }
      } else {
        return this._ended();
      }
    };

    Stream.prototype._ended = function() {
      if (this.paused) {
        return;
      }
      if (this.playing) {
        delete this.playing;
      }
      if (this.complete) {
        this.complete();
      }
      this.node && this.node.disconnect();
      this.source && this.source.disconnect();
      return true;
    };

    return Stream;

  })();

}).call(this);
